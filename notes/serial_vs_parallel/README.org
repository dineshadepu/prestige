#+TITLE: Compare the performance of parallel and serial version

* Example used to simulate
  A group of particles freely falling onto a tank is simulated. Time taken
  taken by each version is compared.

  - Simulation parameters
    A total of 10 timesteps will be run. For each round the particles spacing
    aka number of particles will be increased.

  There are two versions
  - Optimised serial: Which uses nearest neighbours information
  - Optimised parallel: Which uses nearest neighbours information and rayon for
    parallelizing
** System configuration
   These examples are tested on two systems.
  1) Configuration 1

    #+BEGIN_EXAMPLE
Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
CPU(s):                4
On-line CPU(s) list:   0-3
Thread(s) per core:    1
Core(s) per socket:    4
Socket(s):             1
NUMA node(s):          1
Vendor ID:             GenuineIntel
CPU family:            6
Model:                 158
Model name:            Intel(R) Core(TM) i5-7400 CPU @ 3.00GHz
Stepping:              9
CPU MHz:               982.617
CPU max MHz:           3500.0000
CPU min MHz:           800.0000
BogoMIPS:              5999.86
Virtualization:        VT-x
L1d cache:             32K
L1i cache:             32K
L2 cache:              256K
L3 cache:              6144K
NUMA node0 CPU(s):     0-3
    #+END_EXAMPLE

  2) Configuration 2
    #+BEGIN_EXAMPLE
Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
CPU(s):                32
On-line CPU(s) list:   0-31
Thread(s) per core:    2
Core(s) per socket:    8
Socket(s):             2
NUMA node(s):          2
Vendor ID:             GenuineIntel
CPU family:            6
Model:                 62
Model name:            Intel(R) Xeon(R) CPU E5-2650 v2 @ 2.60GHz
Stepping:              4
CPU MHz:               1431.872
CPU max MHz:           3400.0000
CPU min MHz:           1200.0000
BogoMIPS:              5187.78
Virtualization:        VT-x
L1d cache:             32K
L1i cache:             32K
L2 cache:              256K
L3 cache:              20480K
NUMA node0 CPU(s):     0-7,16-23
NUMA node1 CPU(s):     8-15,24-31
    #+END_EXAMPLE


* Serial version

  The file for optimised serial version can be found at [[./examples/serial.rs][here]]. Run it in release
  mode by

  #+BEGIN_SRC sh
# cargo run --example --release serial spacing
cargo run --example --release serial 0.1
  #+END_SRC

and in debug mode by

  #+BEGIN_SRC sh
# cargo run --example serial spacing
cargo run --example serial 0.1
  #+END_SRC

  Here float =0.1= is the spacing between particles. The file takes the spacing
  as an argument and adjusts the number of particles in the simulation.


** Configuration 1
  By varying the spacing between particles, time taken serial code on
  configuration 1 is saved in table [[tab:serial-time-configuration-1]].

  #+NAME: tab:serial-time-configuration-1
|------------------+---------------------------------------------+---------------------|
| Particles        | Serial debug time                           | Serial release time |
|------------------+---------------------------------------------+---------------------|
| 262 (0.1)        | 0.102 sec                                   | 0.065 sec           |
| 9932 (0.0109)    | 2.746 sec                                   | 0.234 sec           |
| 100421 (0.00324) | 30.7 sec                                    | 1.932 sec           |
| 1016002 (0.001)  | 2 minutes 34 sec (154 sec) (overflow error) | 23.631 sec          |

** Configuration 2
  By varying the spacing between particles, time taken serial code on
  configuration 2 is saved in table [[tab:serial-time-configuration-2]]. I haven't performed
  debug builds since they will take too long to run.

  #+NAME: tab:serial-time-configuration-2
|------------------+-------------------+---------------------|
| Particles        | Serial debug time | Serial release time |
|------------------+-------------------+---------------------|
| 262 (0.1)        | NA                | 0.018 sec           |
| 9932 (0.0109)    | NA                | 0.420 sec           |
| 100421 (0.00324) | NA                | 2.808 sec           |
| 1016002 (0.001)  | NA                | 31.494 sec          |


* Parallel version

  The file for optimised serial version can be found at [[./examples/parallel.rs][here]]. Run it in release
  mode by

  #+BEGIN_SRC sh
# cargo run --example --release serial spacing
cargo run --example --release serial 0.1
  #+END_SRC

and in debug mode by

  #+BEGIN_SRC sh
# cargo run --example serial spacing
cargo run --example serial 0.1
  #+END_SRC

** Configuration 1
  By varying the spacing between particles, time taken serial code on
  configuration 1 is saved in table [[tab:parallel-time-configuration-1-pysph]].

  #+NAME: tab:parallel-time-configuration-1
|------------------+---------------------------------------------+-----------------------|
| Particles        | parallel debug time                         | parallel release time |
|------------------+---------------------------------------------+-----------------------|
| 262 (0.1)        | 0.096 sec                                   | 0.065 sec             |
| 9932 (0.0109)    | 2.068 sec                                   | 0.240 sec             |
| 100421 (0.00324) | 22.387 sec                                  | 1.622 sec             |
| 1016002 (0.001)  | 1 minutes 53 sec (154 sec) (overflow error) | 18.387 sec            |

  Time taken for running it in pysph is in table
  #+NAME: tab:parallel-time-configuration-1-pysph
|------------------+---------------|
| Particles        | parallel time |
|------------------+---------------|
| 262 (0.1)        | 0.11 sec      |
| 9932 (0.0109)    | 0.163 sec     |
| 100421 (0.00324) | 0.6 sec       |
| 1016002 (0.001)  | 4.8 sec       |

** Configuration 2
  By varying the spacing between particles, time taken serial code on
  configuration 2 is saved in table [[tab:serial-time-configuration-2]]. I haven't performed
  debug builds since they will take too long to run.

  #+NAME: tab:serial-time-configuration-2
|------------------+---------------------+-----------------------|
| Particles        | parallel debug time | parallel release time |
|------------------+---------------------+-----------------------|
| 262 (0.1)        | NA                  | 0.19 sec              |
| 9932 (0.0109)    | NA                  | 0.403 sec             |
| 100421 (0.00324) | NA                  | 2.757 sec             |
| 1016002 (0.001)  | NA                  | 27.921 sec            |



* Conclusions

  #+CAPTION: How much parallel is faster than serial in release mode
|------------------+----------------------------|
| Particles        | parallel time = X * serial |
|------------------+----------------------------|
| 262 (0.1)        |                         1. |
| 9932 (0.0109)    |                      0.975 |
| 100421 (0.00324) |                     1.1911 |
| 1016002 (0.001)  |                      1.285 |


** *Note*
   Both parallel and serial version had an error with overflow with particles
   more than =10,00000=, but both ran fine in release mode. Parallelizing code
   hasn't had a great improvement in performance. Here only nested loops are
   parallelized, should check if parallelizing every thing will improve any
   performance. Simulations doesn't seem to be scaling up on the server too. A
   better contact search algorithm would improve the time taken for each
   simulation.
