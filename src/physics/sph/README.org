* Introduction
  Smoothed particle hydrodynamics is used for many kinds of simulation. We will
  implement some specific schemes in SPH.
* Weakly compressible SPH
** Create particle array
* Kernel
  Currently we have =cubic_kernel=. To create a kernel use
  #+NAME: name
  #+BEGIN_SRC rust
let ck = CubicKernel::new(dim);
  #+END_SRC

  The attributes of the =kernel= in =Prestige= will be described using a =cubic
  kernel=. Cubic kernel has the following form

  #+BEGIN_EXPORT latex
W ( \mathbf { r } , h ) = \frac { \sigma } { h ^ { v } } \left\{ \begin{array} { l l } { 1 - \frac { 3 } { 2 } q ^ { 2 } + \frac { 3 } { 4 } q ^ { 3 } } & { \text { if } 0 \leq \frac { r } { h } \leq 1 } \\ { \frac { 1 } { 4 } ( 2 - q ) ^ { 3 } } & { \text { if } 1 \leq \frac { r } { h } \leq 2 } \\ { 0 } & { \text { otherwise } } \end{array} \right.
  #+END_EXPORT

  #+BEGIN_EXPORT latex
  E = mc
  #+END_EXPORT
  While initializing the cubic kernel we save dimension and the sigma value into
  the =CubicKernel= struct. \sigma takes the following values

  - \frac{2}{3} in one-dimension.
  - \frac{10}{7 \pi} in one-dimensions.
  - \frac{1}{\pi} in three-dimensions.

  Tests are [[file:kernel.rs::fn%20test_cubic_kernel_attributes()%20{][here]], we check for the \sigma values for different conditions.

  Every kernel will implement =Kernel= trait. =Kernel= trait has following
  methods

  #+NAME: name
  #+BEGIN_SRC rust
pub trait Kernel {
    fn get_wij(&self, rij: f32, h: f32) -> f32;
    fn get_dwij(&self, xij: &Vec<[f32]>, h: f32) -> Vec<f32>;
}
  #+END_SRC
